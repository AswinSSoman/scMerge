library(scMerge)
vignette("scMerge")
vignette(scMerge)
library(pkgdown)
pkgdown::build_article("vignettes/gallery/Mouse_Embyronic_Data.Rmd")
?pkgdown::build_article
pkgdown::build_article("gallery/Mouse_Embyronic_Data.Rmd")
pkgdown::build_article("gallery/Mouse_Embyronic_Data")
pkgdown::build_home()
?person
?build_site
navbar
?navbar
build_home
build_home()
build_home()
?person
pkgdown::build_home()
?url
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::build_site()
usethis::use_github_links()
usethis::use_pkgdown()
template_navbar()
library(pkgdown)
template_navbar()
template_navbar()
library(roxygen2)
roxygenise()
remove.packages("scMerge")
library(scMerge)
template_reference(path = ".")
template_articles(path = ".")
# Chunk 1
suppressPackageStartupMessages({
library(scMerge)
})
data("sce_mESC")
sce_mESC
table(sce_mESC$batch)
table(sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
table(sce_mESC$batch, sce_mESC$cellTypes)
build_articles()
build_articles("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd")
build_articles("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd", pkg = "scMerge")
?build_article
build_article("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd")
build_article("Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing")
build_article("scMerge")
build_article("scMerge")
build_home()
build_article("scMerge")
?prcomp
prcomp
UseMethod("prcomp")
library(RUVSeq)
library(scMerge)
ruvgres<-RUVg(x=assay(sce_mESC,"logcounts"),
cIdx=which(rownames(sce_mESC)%in%segList_ensemblGeneID$mouse$mouse_scSEG),
isLog = T,
k=1)
head(ruvgres$normalizedCounts)[,1:6]
head(ruvgres$W)
library(ruv)
help(RUV2)
ruv2res<-RUV2(Y=t(assay(sce_mESC,"logcounts")),X=sce_mESC$cellTypes,
ctl=which(rownames(sce_mESC)%in%segList_ensemblGeneID$mouse$mouse_scSEG),
k=1)
ruv2_alpha <- solve(t(ruv2res$W) %*% ruv2res$W) %*% t(ruv2res$W) %*% t(assay(sce_mESC,"logcounts"))
normalised_ruv2 <- assay(sce_mESC,"logcounts") - t(as.matrix(ruv2_alpha))%*%t(ruv4res$W)
normalised_ruv2[1:6,1:6]
normalised_ruv2 <- assay(sce_mESC,"logcounts") - t(as.matrix(ruv2_alpha))%*%t(ruv2res$W)
normalised_ruv2[1:6,1:6]
diff <- c(ruvgres$normalizedCounts - normalised_ruv2)
summary(diff)
boxplot(diff)
a
library(pkgdown)
build_article("Gallery_Intro/Gallery_Intro")
build_home
build_home()
build_article("Gallery_Intro/Gallery_Intro")
build_article("Mouse_Liver_data/Mouse_Liver_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Gallery_Intro/Gallery_Intro")
build_article("Gallery_Intro/Gallery_Intro")
build_articles()
build_home()
library(pkgdown)
build_site()
build_home()
build_site()
build_site()
build_site()
build_site()
library(roxygen2)
roxygenise()
build_article("ESC_Data/ESC_Data")
build_site()
build_home()
build_home()
`r Sys.Date()`
Sys.Date()`
Sys.Date()
Sys.Date()
Sys.Date()
format(Sys.time(), '%Y %b %d')
library(pkgdown)
library(prettydoc)
devtools::load_all(".")
library(pkgdown)
build_articles()
library(pkgdown)
library(tidyverse)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_home()
build_article("CellBench_Data/CellBench_Data")
Another batch effect is the different protocols with significant depth differences.
build_article("ESC_Data/ESC_Data")
build_article("mESC_Data/mESC_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Neuronal_Data/Neuronal_Data")
build_article("Pancreas4_Data/Pancreas4_Data")
build_article("Breast_Data/Breast_Data")
>build_article
?build_article
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
install.packages("pkgdown")
library(pkgdown)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
library(rmarkdown)
image_relative
image_relative
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
library(rmarkdown)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
?build_articles
build_article("Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
install.packages("rmarkdown")
install.packages("rmarkdown")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
devtools::install_github('rstudio/rmarkdown")
devtools::install_github('rstudio/rmarkdown')
# Install development version from GitHub
devtools::install_github("r-lib/pkgdown")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
?build_site
library(pkgdown)
?build_site
getwd()
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data")
build_article(name = "Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_articles()
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data.Rmd")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data.Rmd")
build_article(name = "Breast_Data/Breast_Data")
suppressPackageStartupMessages({
library(scMerge)
library(SingleCellExperiment)
library(scater)
})
## mouse ESC data
data("sce_mESC")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
sce_mESC
set.seed(1)
sce_mESC = sce_mESC[,sample(1:ncol(sce_mESC))]
dim(sce_mESC)
## mouse ESC data
data("sce_mESC")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[,sample(1:ncol(sce_mESC), 200)]
dim(sce_mESC)
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
build_site()
pkgdown::build_site()
dim(sce_mESC)
set.seed(2)
sce_mESC = sce_mESC[,sample(1:ncol(sce_mESC), 200)]
dim(sce_mESC)
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
colSums(sce_mESC)
colSums(counts(sce_mESC))
table(colSums(counts(sce_mESC)) != 0)
table(rowSums(counts(sce_mESC)) != 0)
build_site()
pkgdown::build_site()
library(pkgdown)
suppressPackageStartupMessages({
library(scMerge)
library(SingleCellExperiment)
library(scater)
})
load("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds")
download.file("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds")
x = download.file("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds")
load(url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds"))
url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds")
load(url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds"))
readRDS(url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds"))
ls()
sce_mESC = readRDS(url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds"))
sce_mESC
sce_mESC
pkgdown::build_site()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise
base_path <- normalizePath(package.dir)
is_first <- roxygen_setup(base_path)
encoding <- desc::desc_get("Encoding", file = base_path)[[1]]
if (!identical(encoding, "UTF-8")) {
warning("roxygen2 requires Encoding: UTF-8", call. = FALSE)
}
options <- load_options(base_path)
roclets <- roclets %||% options$roclets
if ("collate" %in% roclets) {
update_collate(base_path)
roclets <- setdiff(roclets, "collate")
}
if (length(roclets) == 0)
return(invisible())
roclets <- lapply(roclets, roclet_find)
registry <- purrr::flatten(lapply(roclets, roclet_tags))
blocks <- parse_package(base_path, env = NULL, registry = registry,
global_options = options)
if (clean) {
purrr::walk(roclets, roclet_clean, base_path = base_path)
}
roclets <- lapply(roclets, roclet_preprocess, blocks = blocks,
global_options = options, base_path = base_path)
env <- load_code(base_path)
blocks <- lapply(blocks, block_set_env, env = env, registry = registry,
global_options = options)
results <- lapply(roclets, roclet_process, blocks = blocks,
env = env, base_path = base_path, global_options = options)
out <- purrr::map2(roclets, results, roclet_output, base_path = base_path,
is_first = is_first)
invisible(out)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
pkgdown::build_site()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(scMerge)
library(SingleCellExperiment)
library(scater)
})
# Chunk 3: loading data
sce_mESC = readRDS(url("http://www.maths.usyd.edu.au/u/yingxinl/wwwnb/scMergeData/mESC_scMerge.rds"))
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
sce_mESC = scater::normalise(sce_mESC)
scater::normalise(sce_mESC)
assays(sce_mESC)
roxygenise()
build_site()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
build_site()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(scMerge)
roxygenise()
roxygenise()
build_site()
library(eechidna)
eechidna::abs2011
eechidna::abs2011 %>% head
library(tidyverse)
eechidna::abs2011
eechidna::abs2011 %>% head
eechidna::abs2011 %>% head
eechidna::nat_data
eechidna::nat_data %>% head
eechidna::launchApp()
eechidna::hexDat
eechidna::hexDat %>% head
sample(1:4, 1000)
sample(1:4, 1000, replace = TRUE)
sample(0:1, 1000, replace = TRUE)
sample(0:1, 4, replace = TRUE)
sample(0:1, 4, replace = TRUE)
sample(0:1, 4, replace = TRUE)
sum(sample(0:1, 4, replace = TRUE))
replicate(sum(sample(0:1, 4, replace = TRUE)))
replicate(sum(sample(0:1, 4, replace = TRUE)), 1000)
replicate(sum(sample(0:1, 4, replace = TRUE)), 1000, simplify = FALSE)
sum(sample(0:1, 4, replace = TRUE))
sum(sample(0:1, 4, replace = TRUE))
sum(sample(0:1, 4, replace = TRUE))
sum(sample(0:1, 4, replace = TRUE))
?replicate
replicate(1000, sum(sample(0:1, 4, replace = TRUE)))
hist(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(1000, sum(sample(0:1, 4, replace = TRUE))))/1000
table(replicate(100000, sum(sample(0:1, 4, replace = TRUE))))/100000
ruv::replicate.matrix
marker
is.null(marker)&is.null(marker_list)
help(scMerge)
library(scMerge)
help(scMerge)
library(SingleCellExperiment)
library(scater)
})
# Loading example data
data("sce_mESC")
# Previously computed stably expressed genes
data("segList_ensemblGeneID")
# Running an example data with minimal inputs
sce_mESC_normalised = scMerge(
sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge")
library(kBet)
library(kBET)
silhouette
silhouette()
kBet
silhouette
silhouette()
?rsvd::rpca
library(rsvd)
log.iris <- log( iris[ , 1:4] )
iris.species <- iris[ , 5]
rsvd::rpca(x$newY, k = 10, rand = 1)
library('rsvd')
#
# Load Edgar Anderson's Iris Data
#
data('iris')
#
# log transform
#
log.iris <- log( iris[ , 1:4] )
iris.species <- iris[ , 5]
rsvd::rpca(x$newY, k = 10, rand = 1)
rsvd::rpca(log.iris, k = 10, rand = 1)
rsvd
min(c(NA, 51,5))
min(c(NA, 51,5), na.rm = TRUE)
############################
residop_fast <-
function(A, B) {
return(A - B %*% (solve(t(B) %*% B) %*% (t(B) %*% A)))
}
residop_fast(as.matrix(rpois(10)), as.matrix(rpois(10)))
residop_fast(as.matrix(rpois(10,2)), as.matrix(rpois(10,1)))
residop(as.matrix(rpois(10,2)), as.matrix(rpois(10,1)))
ruv::residop(as.matrix(rpois(10,2)), as.matrix(rpois(10,1)))
ruv::residop(as.matrix(rpois(10,2)), as.matrix(rpois(10,1)))
ruv::residop(as.matrix(rpois(10,2)), as.matrix(rpois(10,1)))
x = rpois(10,1)
x = as.matrix(rpois(10,1))
y = as.matrix(rpois(10,1))
ruv::residop(x, y)
ruv::residop(x, y)
residop_fast(x, y)
library(roxygen2)
roxygenise()
library(scMerge)
detach("package:scMerge", unload=TRUE)
remove.packages("scMerge")
library(scMerge)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_classical")
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.1)
t2 = Sys.time()
t2 - t1
roxygen2::roxygenise()
roxygen2::roxygenise()
library(scMerge)
library(pkgdown)
pkgdown::build_site()
devtools::install_github("SydneyBioX/scMerge")
install.packages("roxygen2")
roxygen2::roxygenise()
file.exists("/dora/nobackup/kevinw/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/src/scMerge.so")
.libPaths()
devtools::clean_dll()
file.exists("/dora/nobackup/kevinw/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/src/scMerge.so")
roxygen2::roxygenise()
library(scMerge)
.libPaths("/verona/nobackup/biostat/Bioconductor/")
library(scMerge)
