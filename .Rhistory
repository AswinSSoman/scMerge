}
)
}
} else {
if(parallel){
pca <- bplapply(
batch_list,
function(x) {
if (!x %in% batch_oneType) {
# prcomp(t(exprsMat[HVG_list[[x]], batch == x]), scale. = TRUE)
matForPCA = exprsMat[HVG_list[[x]], batch == x]
prcompObj = irlba::prcomp_irlba(t(matForPCA),
n = 10,
scale. = TRUE, maxit = 1000)
pcMat = prcompObj$x
rownames(pcMat) = colnames(matForPCA)
return(pcMat)
} else {
NULL
}
}, BPPARAM = parallelParam
)
}else{
pca <- lapply(
batch_list,
function(x) {
if (!x %in% batch_oneType) {
# prcomp(t(exprsMat[HVG_list[[x]], batch == x]), scale. = TRUE)
matForPCA = exprsMat[HVG_list[[x]], batch == x]
prcompObj = irlba::prcomp_irlba(t(matForPCA),
n = 10,
scale. = TRUE, maxit = 1000)
pcMat = prcompObj$x
rownames(pcMat) = colnames(matForPCA)
return(pcMat)
} else {
NULL
}
}
)
}
}
names(pca) <- unlist(batch_list)
clustering_res <- list()
clustering_res_pt_dist <- list()
if(parallel){
res <- bplapply(1:length(pca), function(j){
pca_current <- pca[[j]]
if (!is.null(pca_current)) {
kmeans_res <- kmeans(pca_current[, 1:10], centers = kmeansK[j], nstart = 1000)
clustering_res_tmp <- kmeans_res$cluster
# exprs_current <- exprsMat[HVG_list[[j]], batch == batch_list[j]]
if(!is.null(marker)){
exprs_current <- exprsMat[marker, batch == batch_list[j]]
}else{
exprs_current <- exprsMat[HVG_list[[j]], batch == batch_list[j]]
}
clustering_res_pt_dist_tmp <- lapply(1:kmeansK[j], function(y) {
centroidDist(exprs_current[,kmeans_res$cluster == y, drop = FALSE] )
})
clustering_res_pt_dist_tmp <- unlist(clustering_res_pt_dist_tmp)
clustering_res_pt_dist_tmp <- clustering_res_pt_dist_tmp[names(clustering_res_tmp)]
} else {
clustering_res_tmp <- rep(1, batch_num[j])
names(clustering_res_tmp) <- colnames(exprsMat[, batch == batch_list[j]])
if(!is.null(marker)){
clustering_res_pt_dist_tmp <- centroidDist(exprsMat[marker, batch == batch_list[j]])
}else{
clustering_res_pt_dist_tmp <- centroidDist(exprsMat[HVG_list[[j]], batch == batch_list[j]])
}
}
list(clustering_res_tmp, clustering_res_pt_dist_tmp)
}, BPPARAM = parallelParam)
clustering_res <- lapply(res, function(x) x[[1]])
clustering_res_pt_dist <- lapply(res, function(x) x[[2]])
}else{
for (j in 1:length(pca)) {
pca_current <- pca[[j]]
if (!is.null(pca_current)) {
kmeans_res <- kmeans(pca_current[, 1:10], centers = kmeansK[j], nstart = 1000)
clustering_res[[j]] <- kmeans_res$cluster
# exprs_current <- exprsMat[HVG_list[[j]], batch == batch_list[j]]
if(!is.null(marker)){
exprs_current <- exprsMat[marker, batch == batch_list[j]]
}else{
exprs_current <- exprsMat[HVG_list[[j]], batch == batch_list[j]]
}
clustering_res_pt_dist[[j]] <- lapply(1:kmeansK[j], function(y) {
centroidDist(exprs_current[,kmeans_res$cluster == y, drop = FALSE] )
})
clustering_res_pt_dist[[j]] <- unlist(clustering_res_pt_dist[[j]])
clustering_res_pt_dist[[j]] <- clustering_res_pt_dist[[j]][names(clustering_res[[j]])]
} else {
clustering_res[[j]] <- rep(1, batch_num[j])
names(clustering_res[[j]]) <- colnames(exprsMat[, batch == batch_list[j]])
if(!is.null(marker)){
clustering_res_pt_dist[[j]] <- centroidDist(exprsMat[marker, batch == batch_list[j]])
}else{
clustering_res_pt_dist[[j]] <- centroidDist(exprsMat[HVG_list[[j]], batch == batch_list[j]])
}
}
}
}
return(list(clustering_list = clustering_res, clustering_distProp = clustering_res_pt_dist))
}
######################################################################################################
centroidDist <- function(exprsMat){
centroid_batch <- rowMedians(exprsMat)
point_dist <- colSums((exprsMat - centroid_batch)^2)
point_rank <- rank(point_dist)
point_rank <- point_rank / length(point_rank)
return(point_rank)
}
######################################################################################################
## Function to find the mutual nearest clusters
findMNC <- function(exprMat, clustering_list, dist = "euclidean") {
batch_num <- length(clustering_list)
names(clustering_list) <- paste("Batch", 1:batch_num, sep = "")
## Check which batch has only one cluster
batch_oneType <- which(unlist(lapply(clustering_list,
function(x) length(levels(as.factor(x))) == 1)))
## If there existsome batch_oneType
if (length(batch_oneType) != 0) {
## And if all batch_oneType == num of batches, i.e. every batch only contains one cell type
if (length(batch_oneType) == batch_num) {
combine_pair <- combn(batch_num, 2)
batch_oneType <- NULL
allones <- TRUE
} else {
## if at least some batch contains more than 1 cell type
## Then take away the batches with only one cell type and then iterate through all combn
combine_pair <- combn(c(1:batch_num)[-batch_oneType], 2)
## And then for those batches with only one cell type, we bind to the previous generated combn
for (i in batch_oneType) {
for (j in c(1:batch_num)[-batch_oneType]) {
combine_pair <- cbind(combine_pair, c(i, j))
}
}
allones <- FALSE
}
} else {
combine_pair <- combn(batch_num, 2)
allones <- FALSE
}
mnc <- list()
## If there are only two batches containing only two cell types, then finding MNN is trivial. Return NULL
if (allones & batch_num == 2) {
return(NULL)
} else if (allones) { ## If every batch contains only one cell type...
dist_res <- matrix(NA, nrow = batch_num, ncol = batch_num)
for (k in 1:ncol(combine_pair)) { ## We go through every pairwise batches
print(k)
## Extract the cell type information and the expression matrices
res1 <- clustering_list[[combine_pair[1, k]]]
res2 <- clustering_list[[combine_pair[2, k]]]
mat1 <- exprMat[, names(which(res1 == 1))]
mat2 <- exprMat[, names(which(res2 == 1))]
## The distance between matrices are calculated as such...
if (dist == "cosine") {
dist_mat <- dist(t(mat1), t(mat2), method = "cosine")
} else if (dist == "cor") {
dist_mat <- 1 - cor((mat1), (mat2))
} else {
dist_mat <- pdist::pdist(t(mat1), t(mat2))
}
dist_mat <- as.matrix(dist_mat)
## The dist_res (distance measure between batches) is then the median of all pairwise distances
dist_res[combine_pair[1, k], combine_pair[2, k]] <- dist_res[combine_pair[2, k], combine_pair[1, k]] <- median(dist_mat)
}
## The neighbour_res is then which ever two pairs of batches that are closes to each other
neighbour_res <- apply(dist_res, 1, which.min)
mnc_mat <- c()
for (i in 1:length(neighbour_res)) {
if (neighbour_res[neighbour_res[i]] == i) {
mnc_mat <- rbind(mnc_mat, sort(c(i, neighbour_res[i])))
}
}
mnc_mat <- unique(mnc_mat)
mnc <- list()
for (i in 1:nrow(mnc_mat)) {
mnc[[i]] <- matrix(1, ncol = 2, nrow = 1)
colnames(mnc[[i]]) <- c(paste("Batch", mnc_mat[i, 1], sep = ""),
paste("Batch", mnc_mat[i, 2], sep = ""))
}
} else {
for (k in 1:ncol(combine_pair)) {
dist_res <- list()
print(k)
res1 <- clustering_list[[combine_pair[1, k]]]
res2 <- clustering_list[[combine_pair[2, k]]]
for (i in 1:max(res1)) {
res_tmp <- c()
for (j in 1:max(res2)) {
mat1 <- exprMat[, names(which(res1 == i))]
mat2 <- exprMat[, names(which(res2 == j))]
if (dist == "cosine") {
dist_mat <- dist(t(mat1), t(mat2), method = "cosine")
} else if (dist == "cor") {
dist_mat <- 1 - cor((mat1), (mat2))
} else {
dist_mat <- pdist::pdist(t(mat1), t(mat2))
}
dist_mat <- as.matrix(dist_mat)
res_tmp <- c(res_tmp, median(dist_mat))
}
dist_res[[i]] <- res_tmp
}
dist_res <- do.call(rbind, dist_res)
neighbour_batch1 <- apply(dist_res, 1, which.min)
neighbour_batch2 <- apply(dist_res, 2, which.min)
mnc_tmp <- c()
for (l in 1:length(neighbour_batch1)) {
if (neighbour_batch2[neighbour_batch1[l]] == l) {
mnc_tmp <- rbind(mnc_tmp, c(l, neighbour_batch1[l]))
}
}
mnc[[k]] <- mnc_tmp
colnames(mnc[[k]]) <- c(
paste("Batch", combine_pair[1, k], sep = ""),
paste("Batch", combine_pair[2, k], sep = "")
)
}
} ## End else
###############################################################
## Function to perform network analysis
edge_list <- do.call(rbind, lapply(mnc, function(x)
t(apply(x, 1, function(y) paste(colnames(x), y, sep = "_")))))
if(is.null(edge_list)){
return(NULL)
}else{
g <- igraph::graph_from_edgelist(edge_list, directed = FALSE)
plot(g)
mnc <- igraph::fastgreedy.community(g)
mnc_df <- data.frame(group = as.numeric(mnc$membership),
batch = as.numeric(gsub("Batch", "", gsub("_.*", "", mnc$names))),
cluster = as.numeric(gsub(".*_", "", mnc$names)))
if (allones) {
mnc_df_new <- mnc_df
batch_oneType <- c(1:batch_num)[-c(mnc_mat)]
for (i in batch_oneType) {
print(i)
neighbour_order <- rank(dist_res[i, ], na.last = T)
group_order1 <- mnc_df[mnc_df[, "batch"] == which(neighbour_order == 1), "group"]
group_order2 <- mnc_df[mnc_df[, "batch"] == which(neighbour_order == 2), "group"]
if (group_order1 == group_order2) {
mnc_df_new <- rbind(mnc_df_new, c(group_order1, i, 1))
}
}
mnc_df <- mnc_df_new
}
return(mnc_df)
}
}
findMNC_parallel <- function(exprMat, clustering_list, dist = "euclidean", parallelParam = bpparam()) {
batch_num <- length(clustering_list)
names(clustering_list) <- paste("Batch", 1:batch_num, sep = "")
## Check which batch has only one cluster
batch_oneType <- which(unlist(lapply(clustering_list,
function(x) length(levels(as.factor(x))) == 1)))
## If there existsome batch_oneType
if (length(batch_oneType) != 0) {
## And if all batch_oneType == num of batches, i.e. every batch only contains one cell type
if (length(batch_oneType) == batch_num) {
combine_pair <- combn(batch_num, 2)
batch_oneType <- NULL
allones <- TRUE
} else {
## if at least some batch contains more than 1 cell type
## Then take away the batches with only one cell type and then iterate through all combn
combine_pair <- combn(c(1:batch_num)[-batch_oneType], 2)
## And then for those batches with only one cell type, we bind to the previous generated combn
for (i in batch_oneType) {
for (j in c(1:batch_num)[-batch_oneType]) {
combine_pair <- cbind(combine_pair, c(i, j))
}
}
allones <- FALSE
}
} else {
combine_pair <- combn(batch_num, 2)
allones <- FALSE
}
mnc <- list()
## If there are only two batches containing only two cell types, then finding MNN is trivial. Return NULL
if (allones & batch_num == 2) {
return(NULL)
} else if (allones) { ## If every batch contains only one cell type...
dist_res <- matrix(NA, nrow = batch_num, ncol = batch_num)
dist_mat_med <- bplapply (1:ncol(combine_pair), function(k) { ## We go through every pairwise batches
# print(k)
## Extract the cell type information and the expression matrices
res1 <- clustering_list[[combine_pair[1, k]]]
res2 <- clustering_list[[combine_pair[2, k]]]
mat1 <- exprMat[, names(which(res1 == 1))]
mat2 <- exprMat[, names(which(res2 == 1))]
## The distance between matrices are calculated as such...
if (dist == "cosine") {
dist_mat <- dist(t(mat1), t(mat2), method = "cosine")
} else if (dist == "cor") {
dist_mat <- 1 - cor((mat1), (mat2))
} else {
dist_mat <- pdist::pdist(t(mat1), t(mat2))
}
dist_mat <- as.matrix(dist_mat)
## The dist_res (distance measure between batches) is then the median of all pairwise distances
median(dist_mat)
}, BPPARAM = parallelParam
)
for(k in 1:ncol(combine_pair)){
dist_res[combine_pair[1, k], combine_pair[2, k]] <- dist_res[combine_pair[2, k], combine_pair[1, k]] <- dist_mat_med[[k]]
}
## The neighbour_res is then which ever two pairs of batches that are closes to each other
neighbour_res <- apply(dist_res, 1, which.min)
mnc_mat <- c()
for (i in 1:length(neighbour_res)) {
if (neighbour_res[neighbour_res[i]] == i) {
mnc_mat <- rbind(mnc_mat, sort(c(i, neighbour_res[i])))
}
}
mnc_mat <- unique(mnc_mat)
mnc <- list()
for (i in 1:nrow(mnc_mat)) {
mnc[[i]] <- matrix(1, ncol = 2, nrow = 1)
colnames(mnc[[i]]) <- c(paste("Batch", mnc_mat[i, 1], sep = ""),
paste("Batch", mnc_mat[i, 2], sep = ""))
}
} else {
for (k in 1:ncol(combine_pair)) {
dist_res <- list()
# print(k)
res1 <- clustering_list[[combine_pair[1, k]]]
res2 <- clustering_list[[combine_pair[2, k]]]
dist_res <- bplapply(1:max(res1), function(i){
res_tmp <- c()
for (j in 1:max(res2)) {
mat1 <- exprMat[, names(which(res1 == i))]
mat2 <- exprMat[, names(which(res2 == j))]
if (dist == "cosine") {
dist_mat <- dist(t(mat1), t(mat2), method = "cosine")
} else if (dist == "cor") {
dist_mat <- 1 - cor((mat1), (mat2))
} else {
dist_mat <- pdist::pdist(t(mat1), t(mat2))
}
dist_mat <- as.matrix(dist_mat)
res_tmp <- c(res_tmp, median(dist_mat))
}
dist_res[[i]] <- res_tmp
}, BPPARAM = parallelParam)
dist_res <- do.call(rbind, dist_res)
neighbour_batch1 <- apply(dist_res, 1, which.min)
neighbour_batch2 <- apply(dist_res, 2, which.min)
mnc_tmp <- c()
for (l in 1:length(neighbour_batch1)) {
if (neighbour_batch2[neighbour_batch1[l]] == l) {
mnc_tmp <- rbind(mnc_tmp, c(l, neighbour_batch1[l]))
}
}
mnc[[k]] <- mnc_tmp
colnames(mnc[[k]]) <- c(
paste("Batch", combine_pair[1, k], sep = ""),
paste("Batch", combine_pair[2, k], sep = "")
)
}
} ## End else
###############################################################
## Function to perform network analysis
edge_list <- do.call(rbind, lapply(mnc, function(x)
t(apply(x, 1, function(y) paste(colnames(x), y, sep = "_")))))
if(is.null(edge_list)){
return(NULL)
}else{
g <- igraph::graph_from_edgelist(edge_list, directed = FALSE)
plot(g)
mnc <- igraph::fastgreedy.community(g)
mnc_df <- data.frame(group = as.numeric(mnc$membership),
batch = as.numeric(gsub("Batch", "", gsub("_.*", "", mnc$names))),
cluster = as.numeric(gsub(".*_", "", mnc$names)))
if (allones) {
mnc_df_new <- mnc_df
batch_oneType <- c(1:batch_num)[-c(mnc_mat)]
for (i in batch_oneType) {
print(i)
neighbour_order <- rank(dist_res[i, ], na.last = T)
group_order1 <- mnc_df[mnc_df[, "batch"] == which(neighbour_order == 1), "group"]
group_order2 <- mnc_df[mnc_df[, "batch"] == which(neighbour_order == 2), "group"]
if (group_order1 == group_order2) {
mnc_df_new <- rbind(mnc_df_new, c(group_order1, i, 1))
}
}
mnc_df <- mnc_df_new
}
return(mnc_df)
}
}
######################################################################################################
## Function to create replicate based on the mutual nearest cluster results
mncReplicate <- function(clustering_list, clustering_distProp, replicate_prop, mnc_df) {
batch_num <- length(clustering_list)
if (!is.null(mnc_df)) {
idx_noRep <- list()
# For each batches, check whether there is any clusters that do not have replicates
# for(j in 1:length(clustering_list)){
#   idx_noRep[[j]]<-which(!(1:max(clustering_list[[j]]))%in%mnc[,j])
# }
for (j in 1:length(clustering_list)) {
idx_noRep[[j]] <- which(!(1:max(clustering_list[[j]])) %in% mnc_df[mnc_df$batch == j, "cluster"])
}
replicate_vector <- rep(NA, length(unlist(clustering_list)))
names(replicate_vector) <- names(unlist(clustering_list))
clustering_distProp <- unlist(clustering_distProp)
replicate_size <- table(mnc_df$group)
for (i in 1:max(mnc_df$group)) {
tmp_names <- c()
# For each batch in this replicate
mnc_df_sub <- mnc_df[mnc_df$group == i, ]
for (l in 1:replicate_size[i]) {
# tmp_names<-c(tmp_names,names(which(clustering_list[[l]]==mnc[i,l])))
tmp_names <- c(tmp_names, names(which(clustering_list[[mnc_df_sub[l, "batch"]]] == mnc_df_sub[l, "cluster"])))
}
replicate_vector[tmp_names[clustering_distProp[tmp_names] <= replicate_prop]] <- paste("Replicate", i, sep = "_")
}
current_idx <- max(mnc_df$group)
for (j in 1:length(clustering_list)) {
if (length(idx_noRep[[j]]) != 0) {
for (k in 1:length(idx_noRep[[j]])) {
tmp_names <- names(which(clustering_list[[j]] == idx_noRep[[j]][k]))
replicate_vector[tmp_names[clustering_distProp[tmp_names] <= replicate_prop]] <- paste("Replicate", current_idx + k, sep = "_")
}
current_idx <- current_idx + length(idx_noRep[[j]])
}
}
replicate_vector[is.na(replicate_vector)] <- 1:sum(is.na(replicate_vector))
}else{
replicate_vector <- rep(NA, length(unlist(clustering_list)))
names(replicate_vector) <- names(unlist(clustering_list))
clustering_distProp <- unlist(clustering_distProp)
current_idx <- 1
for (j in 1:length(clustering_list)) {
for (k in 1:max(clustering_list[[j]])) {
tmp_names <- names(which(clustering_list[[j]] == k))
replicate_vector[tmp_names[clustering_distProp[tmp_names] <= replicate_prop]] <- paste("Replicate", current_idx + k, sep = "_")
}
current_idx <- current_idx + max(clustering_list[[j]])
}
replicate_vector[is.na(replicate_vector)] <- 1:sum(is.na(replicate_vector))
}
return(replicate_vector)
}
######################################################################################################
#Function to create replicates based on wanted varition
wvReplicate <- function(exprsMat, WV, WV_marker, replicate_vector) {
names(WV) <- colnames(exprsMat)
if (!is.null(WV_marker)) {
marker_expr <- lapply(WV_marker, function(x) aggregate(exprsMat[x, ],
by = list(replicate_vector),
FUN = mean
))
names(marker_expr) <- WV_marker
marker_expr <- do.call(cbind, lapply(marker_expr, function(x) x[, 2]))
rownames(marker_expr) <- names(table(replicate_vector))
km <- kmeans(marker_expr, centers = 2)
tab_max <- table(apply(km$centers, 2, which.max))
marker_cluster <- names(tab_max)[which.max(tab_max)]
marker_replicate <- names(which(km$cluster == marker_cluster))
replicate_vector[replicate_vector %in% marker_replicate] <- paste(replicate_vector[replicate_vector %in% marker_replicate],
WV[replicate_vector %in% marker_replicate],
sep = "_"
)
#repMat_new <- ruv::replicate.matrix(as.factor(replicate_vector))
} else {
replicate_vector <- paste(replicate_vector, WV, sep = "_")
#repMat_new <- ruv::replicate.matrix(as.factor(paste(replicate_vector, WV, sep = "_")))
}
return(replicate_vector)
}
######################################################################################################
#Function to create replicates based on known cell types
supervisedReplicate <- function(exprsMat, cell_type, replicate_prop){
clustering_distProp <- lapply(unique(cell_type),
function(x) centroidDist(exprsMat[,cell_type==x]))
clustering_distProp <- unlist(clustering_distProp)[names(cell_type)]
replicate_vector <- rep(NA, length(cell_type))
replicate_vector[clustering_distProp <= replicate_prop] <- cell_type[clustering_distProp <= replicate_prop]
replicate_vector[is.na(replicate_vector)] <- 1:sum(is.na(replicate_vector))
return(replicate_vector)
}
system.time(res <- scReplicate(sce_mESC,
batch = sce_mESC$batch,
kmeansK = c(1,3,3,1,1)))
system.time(res <- scReplicate_parallel(sce_mESC,
batch = sce_mESC$batch,
kmeansK = c(1,3,3,1,1),
parallel = T,
parallelParam = DoparParam()))
res
system.time(res <- scReplicate(sce_mESC,
batch = sce_mESC$batch,
kmeansK = c(1,3,3,1,1)))
system.time(res2 <- scReplicate_parallel(sce_mESC,
batch = sce_mESC$batch,
kmeansK = c(1,3,3,1,1),
parallel = T,
parallelParam = DoparParam()))
res2
identical(res, res2)
BiocManager::install("testthat")
library(testthat)
install.packages("microbenchmark")
library(scMerge)
help("scReplicate")
rm(list=ls())
