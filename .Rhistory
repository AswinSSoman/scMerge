library(scRUVIII)
data("segList_ensemblGeneID")
save(segList_ensemblGeneID,file="/Users/yingxinlin/PhD/Single-cell Normalisation/scRUV/segList_ensemblGeneID.RData")
library(roxygen2)
library(roxygen2)
roxygenise()
library(BiocInstaller)
biocLite("rsvd")
biocLite("sm")
library(ruv)
library(rsvd)
libraru(SingleCellExperiment)
library(SingleCellExperiment)
library(igraph)
library(pdist)
library(proxy)
install.packages("proxy")
library(BiocInstaller)
library(roxygen2)
roxygenise()
library(BiocInstaller)
biocLite("kBET")
biocLite("kBET")
biocLite("M3Drop")
biocLite("bbmle")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("M3Drop")
install.packages("bbmle")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("M3Drop")
library(devtools)
install_github('theislab/kBET')
library(devtools)
install_github('theislab/kBET')
library(devtools)
install_github('theislab/kBET')
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("M3Drop")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("M3Drop")
library(M3Drop)
library(scMerge)
library(roxygen2)
roxygenise()
?scMerge
roxygenise()
roxygenise()
Sys.which("git")
library(devtools)
install_github('SydneyBioX/scMerge')
?Steop
?stop
?assay
roxygen2::roxygenise()
library(scMerge)
assay
example("scMerge")
example(scMerge)
example()
examples()
?scMerge
roxygen2::roxygenise()
require(SingleCellExperiment)
#Loading example data
data("sce_mESC")
data("segList_ensemblGeneID")
#scMerge
sce_mESC<- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scRUV")
ruv::RUVIII
library(roxygen2)
roxygenise()
ruv::residop()
ruv::residop
library(scMerge)
roxygenise()
library(scMerge)
ruv::RUVIII
library(orxy)
library(roxygen2)
roxygenise()
svd(diag(1,1000))
tmp1 = microbenchmark::microbenchmark(svd(diag(1,500)), times = 100)
tmp1 = microbenchmark::microbenchmark(svd(diag(1,100)), times = 100)
tmp2 = microbenchmark::microbenchmark(rsvd::rsvd(diag(1,100)), times = 100)
tmp1
tmp2
set.seed(1)
x = matrix(rnorm(100*100), ncol = 100)
tmp1 = microbenchmark::microbenchmark(svd(x), times = 100)
tmp2 = microbenchmark::microbenchmark(rsvd::rsvd(x), times = 100)
tmp1
tmp2
library(scMerge)
install.packages(c("ruv", "rsvd", "igraph", "pdist", "proxy"))
devtools::install_github("theislab/kBET")
source("https://bioconductor.org/biocLite.R")
biocLite(c("SingleCellExperiment", "M3Drop"))
devtools::install_github("SydneyBioX/scMerge")
devtools::install_github("SydneyBioX/scMerge")
install.packages("roxygen2")
library(roxygen2)
roxygenise()
roxygenise()
#' fastRUVIII
#'
#' perform fastRUVIII
#'
#'
#' @author Yingxin Lin
#' @export
fastRUVIII <-
function(Y, M, ctl, k = NULL, eta = NULL, include.intercept = TRUE,
average = FALSE, fullalpha = NULL, return.info = FALSE, inputcheck = TRUE) {
if (is.data.frame(Y)) {
Y <- data.matrix(Y)
}
m <- nrow(Y)
n <- ncol(Y)
M <- ruv::replicate.matrix(M)
ctl <- tological(ctl, n)
if (inputcheck) {
if (m > n) {
warning("m is greater than n!  This is not a problem itself, but may indicate that you need to transpose your data matrix.  Please ensure that rows correspond to observations (e.g. microarrays) and columns correspond to features (e.g. genes).")
}
if (sum(is.na(Y)) > 0) {
warning("Y contains missing values.  This is not supported.")
}
if (sum(Y == Inf, na.rm = TRUE) + sum(Y == -Inf, na.rm = TRUE) >
0) {
warning("Y contains infinities.  This is not supported.")
}
}
Y <- ruv::RUV1(Y, eta, ctl, include.intercept = include.intercept)
if (ncol(M) >= m) {
newY <- Y
} else if (is.null(k)) {
ycyctinv <- solve(Y[, ctl] %*% t(Y[, ctl]))
newY <- (M %*% solve(t(M) %*% ycyctinv %*% M) %*% (t(M) %*%
ycyctinv)) %*% Y
fullalpha <- NULL
}
else if (k == 0) {
newY <- Y
fullalpha <- NULL
}
else {
if (is.null(fullalpha)) {
# Y0 = residop_fast(Y, M)
# if(min(m - ncol(M),sum(ctl))<=150){ rsvd_k=150}else{rsvd_k=min(m - ncol(M),sum(ctl))}
# fullalpha = t(rsvd(Y0 %*% t(Y0),k=rsvd_k)$u[, 1:min(m - ncol(M),
#    sum(ctl)), drop = FALSE]) %*% Y
Y0 <- residop_fast(Y, M)
####################
## KW: This switch was changed from sum(ctl) to 0.1*min(dim(Y0)), as we need to work with more data
# if (min(m - ncol(M), sum(ctl)) <= 150) {
#   rsvd_k <- 150
# } else {
#   rsvd_k <- sum(ctl)
# }
propEigen = 0.1
rsvd_k = min(m - ncol(M), sum(ctl), ceiling(propEigen*min(dim(Y0))))
####################
## KW: At the advice of JO, q should not be lowered.
# if (nrow(M) >= 300) {
#   rvsd_q <- 1
# } else {
#   rvsd_q <- 2
# }
####################
fullalpha <- t(rsvd::rsvd(Y0 %*% t(Y0), k = rsvd_k, q = 2)$u[, 1:rsvd_k, drop = FALSE]) %*% Y
}
alpha <- fullalpha[1:min(k, nrow(fullalpha)), , drop = FALSE]
ac <- alpha[, ctl, drop = FALSE]
W <- Y[, ctl] %*% t(ac) %*% solve(ac %*% t(ac))
newY <- Y - W %*% alpha
}
if (average) {
newY <- ((1 / apply(M, 2, sum)) * t(M)) %*% newY
}
if (!return.info) {
return(newY)
} else {
return(list(
newY = newY, M = M, fullalpha = fullalpha,
rsvd_k_options = c(
"m-ncol(M)" = m - ncol(M),
"sum(ctl)" = sum(ctl),
"rsvd_prop_propEigen" = ceiling(propEigen*min(dim(Y0))))
)
)
}
}
residop_fast <-
function(A, B) {
return(A - B %*% solve(t(B) %*% B) %*% (t(B) %*% A))
}
tological <-
function(ctl, n) {
ctl2 <- rep(FALSE, n)
ctl2[ctl] <- TRUE
return(ctl2)
}
library(roxygen2)
roxygenise()
library(roxygen2)
roxygenise()
library(scMerge)
help(scMerge)
require(SingleCellExperiment)
# Loading example data
data("sce_mESC")
# Previously computed stably expressed genes
data("segList_ensemblGeneID")
# Running an example data with minimal inputs
sce_mESC<- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge",fast_svd = FALSE)
sce_mESC <- runPCA(sce_mESC, exprs_value = "scMerge")
library(scater)
sce_mESC <- runPCA(sce_mESC, exprs_value = "scMerge")
plotPCA(sce_mESC)
