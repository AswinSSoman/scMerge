# if (return_sce) {
#   if (is.null(assay_name)) {
#     assay_name <- paste("scMerge_RUVk", ruv3res$k, sep = "")
#   }
#   assay(sce_combine, assay_name) <- t(ruv3res$newY)
#   cat(paste("Return assay named \n", assay_name))
#   return(sce_combine)
# } else {
#   return(res = list(
#     normalised_matrix = ruv3res$newY,
#     scRUV_res = ruv3res,
#     scRep_res = repMat
#   ))
# } ## End return_sce criterion
roxygenise()
ruv3res <- scRUVIII(Y = t(exprs_mat),
M = repMat,
ctl = ctl,
k = ruvK,
batch = sce_batch,
fullalpha = NULL,
cell_type = cell_type,
return.info = TRUE,
return_all_RUV = return_all_RUV,
fast_svd = fast_svd,
propEigen = propEigen)
sce_final_result = sce_combine
ruv3res
ruvK
return_all_RUV
return_all_RUV = TRUE
if(return_all_RUV){
message("You chose return_all_RUV = TRUE, the result will contain all RUV computations. This could be a very large object.")
## We need an assay_name for every ruvK, if return_all_RUV is TRUE
if(length(assay_name) != length(ruvK)){
stop("You chose return_all_RUV = TRUE. In this case, the length of assay_name must be equal to the length of ruvK")
}
}
sce_final_result = sce_combine
if(!return_all_RUV){
## If return_all_RUV is FALSE, then scRUVIII should've just returned with a single result (ruv3res_optimal)
assay(sce_final_result, assay_name) <- t(ruv3res$newY)
metadata(sce_final_result) = list(
"ruvK" = ruvK,
"ruvK_optimal" = ruv3res$optimal_ruvK
)
} else{
## if return_all_RUV is TRUE, then the previous check ensured assay_name is not NULL and matches the length of ruvK
## And the scRUVIII should've just returned with a single result (ruv3res_optimal)
listNewY = lapply(ruv3res[names(ruv3res) != "optimal_ruvK"], function(x){t(x$newY)})
for(i in 1:length(listNewY)){
assay(sce_final_result, assay_name[i]) <- listNewY[[i]]
}
}
return_all_RUV
ruv3res <- scRUVIII(Y = t(exprs_mat),
M = repMat,
ctl = ctl,
k = ruvK,
batch = sce_batch,
fullalpha = NULL,
cell_type = cell_type,
return.info = TRUE,
return_all_RUV = return_all_RUV,
fast_svd = fast_svd,
propEigen = propEigen)
sce_final_result = sce_combine
return_all_RUV
## if return_all_RUV is TRUE, then the previous check ensured assay_name is not NULL and matches the length of ruvK
## And the scRUVIII should've just returned with a single result (ruv3res_optimal)
listNewY = lapply(ruv3res[names(ruv3res) != "optimal_ruvK"], function(x){t(x$newY)})
assay_name
## if return_all_RUV is TRUE, then the previous check ensured assay_name is not NULL and matches the length of ruvK
## And the scRUVIII should've just returned with a single result (ruv3res_optimal)
listNewY = lapply(ruv3res[names(ruv3res) != "optimal_ruvK"], function(x){t(x$newY)})
for(i in 1:length(listNewY)){
assay(sce_final_result, assay_name[i]) <- listNewY[[i]]
}
sce_final_result
ruv3res$optimal_ruvK
ruvK
sce_final_result = sce_combine
if(!return_all_RUV){
## If return_all_RUV is FALSE, then scRUVIII should've just returned with a single result (ruv3res_optimal)
assay(sce_final_result, assay_name) <- t(ruv3res$newY)
} else{
## if return_all_RUV is TRUE, then the previous check ensured assay_name is not NULL and matches the length of ruvK
## And the scRUVIII should've just returned with a single result (ruv3res_optimal)
listNewY = lapply(ruv3res[names(ruv3res) != "optimal_ruvK"], function(x){t(x$newY)})
for(i in 1:length(listNewY)){
assay(sce_final_result, assay_name[i]) <- listNewY[[i]]
} ## End for loop
}
metadata(sce_final_result) = list(
"ruvK" = ruvK,
"ruvK_optimal" = ruv3res$optimal_ruvK
)
sce_final_result
sce_final_result %>% metadata()
library(magrittr)
sce_final_result %>% metadata()
library(roxygen2)
roxygenise()
roxygenise()
repMat
roxygenise()
help(scMerge)
help("scMerge")
sce_final_result
roxygenise()
roxygenise()
roxygenise()
library(pkgdown)
build_site()
roxygenise()
?person
roxygenise()
build_site()
library(roxygen2)
roxygenise()
install.packages("doSNOW")
install.packages("distr")
install.packages("distr")
roxygenise()
?scMerge
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
})
# Loading example data
data("sce_mESC")
# Previously computed stably expressed genes
data("segList_ensemblGeneID")
# Running an example data with minimal inputs
sce_final_result = sce_combine
sce_mESC_normalised = scMerge(
sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge", fast_svd = TRUE)
if(!return_all_RUV){
## If return_all_RUV is FALSE, then scRUVIII should've just returned with a single result (ruv3res_optimal)
assay(sce_final_result, assay_name) <- t(ruv3res$newY)
} else{
## if return_all_RUV is TRUE, then the previous check ensured assay_name is not NULL and matches the length of ruvK
## And the scRUVIII should've just returned with a single result (ruv3res_optimal)
listNewY = lapply(ruv3res[names(ruv3res) != "optimal_ruvK"], function(x){t(x$newY)})
for(i in 1:length(listNewY)){
assay(sce_final_result, assay_name[i]) <- listNewY[[i]]
} ## End for loop
}
scater::plotPCA(sce_mESC_normalised, colour_by = "cellTypes", shape = "batch",
run_args = list(exprs_values = "logcounts"))
scater::plotPCA(sce_mESC_normalised, colour_by = "cellTypes", shape = "batch",
run_args = list(exprs_values = "logcounts"))
metadata(sce_final_result) = list(
"ruvK" = ruvK,
"ruvK_optimal" = ruv3res$optimal_ruvK,
"scRep_res" = repMat
)
pkgdown::build_site()
library(scMerge)
library(roxygen2)
roxygenise()
library(scMerge)
library(SingleCellExperiment)
library(scater)
# mouse ESC data
data("sce_mESC")
# single-cell stably expressed gene list
data("segList_ensemblGeneID")
sce_mESC
scater::plotPCA(sce_mESC, colour_by="cellTypes", shape_by = "batch")
sce_mESC
table(sce_mESC$batch)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_unsupervised")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
sce_mESC
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised_all",
replicate_prop = 1)
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_unsupervised_all")
scater::plotPCA(sce_mESC, colour_by="cellTypes",shape_by="batch")
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_supervised",
cell_type = sce_mESC$cellTypes)
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_supervised")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
sce_mESC
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_semisupervised1",
cell_type = sce_mESC$cellTypes,
cell_type_inc = which(sce_mESC$cellTypes == "2i"))
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_semisupervised2",
cell_type = sce_mESC$cellTypes,
cell_type_match = TRUE)
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_semisupervised2")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised_all")
t2 = Sys.time()
t2 - t1
dim(sce_mESC)
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised_all",
fast_svd = TRUE,
rsvd_prop = 0.1)
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised_all",
fast_svd = TRUE,
rsvd_prop = 0.05)
t2 = Sys.time()
t2 - t1
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.05)
t2 = Sys.time()
t2 - t1
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_fast")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.01)
t2 = Sys.time()
t2 - t1
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_fast")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_classical")
t1 = Sys.time()
sce_mESC <- scMerge(sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_classical")
t2 = Sys.time()
t2 - t1
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_classical")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
roxygenise()
library(devtools)
build_vignettes()
roxygenise()
build_vignettes()
pkgdown::build_site()
build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
vignette("scMerge")
library(scMerge)
vignette("scMerge")
vignette(scMerge)
library(pkgdown)
pkgdown::build_article("vignettes/gallery/Mouse_Embyronic_Data.Rmd")
?pkgdown::build_article
pkgdown::build_article("gallery/Mouse_Embyronic_Data.Rmd")
pkgdown::build_article("gallery/Mouse_Embyronic_Data")
pkgdown::build_home()
?person
?build_site
navbar
?navbar
build_home
build_home()
build_home()
?person
pkgdown::build_home()
?url
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_reference()
pkgdown::build_site()
usethis::use_github_links()
usethis::use_pkgdown()
template_navbar()
library(pkgdown)
template_navbar()
template_navbar()
library(roxygen2)
roxygenise()
remove.packages("scMerge")
library(scMerge)
template_reference(path = ".")
template_articles(path = ".")
# Chunk 1
suppressPackageStartupMessages({
library(scMerge)
})
data("sce_mESC")
sce_mESC
table(sce_mESC$batch)
table(sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch")
table(sce_mESC$batch, sce_mESC$cellTypes)
build_articles()
build_articles("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd")
build_articles("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd", pkg = "scMerge")
?build_article
build_article("vignettes/Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing.Rmd")
build_article("Mouse_Embryonic_Data/Mouse_Embyronic_Data_Processing")
build_article("scMerge")
build_article("scMerge")
build_home()
build_article("scMerge")
?prcomp
prcomp
UseMethod("prcomp")
library(RUVSeq)
library(scMerge)
ruvgres<-RUVg(x=assay(sce_mESC,"logcounts"),
cIdx=which(rownames(sce_mESC)%in%segList_ensemblGeneID$mouse$mouse_scSEG),
isLog = T,
k=1)
head(ruvgres$normalizedCounts)[,1:6]
head(ruvgres$W)
library(ruv)
help(RUV2)
ruv2res<-RUV2(Y=t(assay(sce_mESC,"logcounts")),X=sce_mESC$cellTypes,
ctl=which(rownames(sce_mESC)%in%segList_ensemblGeneID$mouse$mouse_scSEG),
k=1)
ruv2_alpha <- solve(t(ruv2res$W) %*% ruv2res$W) %*% t(ruv2res$W) %*% t(assay(sce_mESC,"logcounts"))
normalised_ruv2 <- assay(sce_mESC,"logcounts") - t(as.matrix(ruv2_alpha))%*%t(ruv4res$W)
normalised_ruv2[1:6,1:6]
normalised_ruv2 <- assay(sce_mESC,"logcounts") - t(as.matrix(ruv2_alpha))%*%t(ruv2res$W)
normalised_ruv2[1:6,1:6]
diff <- c(ruvgres$normalizedCounts - normalised_ruv2)
summary(diff)
boxplot(diff)
a
library(pkgdown)
build_article("Gallery_Intro/Gallery_Intro")
build_home
build_home()
build_article("Gallery_Intro/Gallery_Intro")
build_article("Mouse_Liver_data/Mouse_Liver_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Gallery_Intro/Gallery_Intro")
build_article("Gallery_Intro/Gallery_Intro")
build_articles()
build_home()
library(pkgdown)
build_site()
build_home()
build_site()
build_site()
build_site()
build_site()
library(roxygen2)
roxygenise()
build_article("ESC_Data/ESC_Data")
build_site()
build_home()
build_home()
`r Sys.Date()`
Sys.Date()`
Sys.Date()
Sys.Date()
Sys.Date()
format(Sys.time(), '%Y %b %d')
library(pkgdown)
library(prettydoc)
devtools::load_all(".")
library(pkgdown)
build_articles()
library(pkgdown)
library(tidyverse)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_home()
build_article("CellBench_Data/CellBench_Data")
Another batch effect is the different protocols with significant depth differences.
build_article("ESC_Data/ESC_Data")
build_article("mESC_Data/mESC_Data")
build_article("Mouse_Liver_Data/Mouse_Liver_Data")
build_article("Neuronal_Data/Neuronal_Data")
build_article("Pancreas4_Data/Pancreas4_Data")
build_article("Breast_Data/Breast_Data")
>build_article
?build_article
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
install.packages("pkgdown")
library(pkgdown)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
library(rmarkdown)
image_relative
image_relative
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
library(rmarkdown)
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
build_article("Breast_Data/Breast_Data")
?build_articles
build_article("Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
install.packages("rmarkdown")
install.packages("rmarkdown")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
devtools::install_github('rstudio/rmarkdown")
devtools::install_github('rstudio/rmarkdown')
# Install development version from GitHub
devtools::install_github("r-lib/pkgdown")
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
?build_site
library(pkgdown)
?build_site
getwd()
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data")
build_article(name = "Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_articles()
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
library(pkgdown)
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "Breast_Data/Breast_Data")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data.Rmd")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data")
build_article(name = "~/Dropbox (Sydney Uni)/Single Cell Reserach/SCProj-Normalization/codes/scMerge/vignettes/Breast_Data/Breast_Data.Rmd")
build_article(name = "Breast_Data/Breast_Data")
